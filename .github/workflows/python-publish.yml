# This workflow will upload a Python Package to PyPI when the build artifacts are available
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation

name: Publish Python Package to PyPI

on:
  workflow_run:
    workflows: ["Build Python Package"]
    types:
      - completed

permissions:
  contents: read

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write

    # Dedicated environments with protections for publishing are strongly recommended.
    # For more information, see: https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment#deployment-protection-rules
    environment:
      name: pypi
      # OPTIONAL: uncomment and update to include your PyPI project URL in the deployment status:
      # url: https://pypi.org/p/YOURPROJECT
      #
      # ALTERNATIVE: if your GitHub Release name is the PyPI project version string
      # ALTERNATIVE: exactly, uncomment the following line instead:
      # url: https://pypi.org/project/YOURPROJECT/${{ github.event.release.name }}

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: python-package-distributions
          path: dist/

      - name: Install twine
        run: |
          python -m pip install --upgrade pip
          pip install twine

      - name: Publish release distributions to PyPI
        env:
          PYPI_TOKEN: ${{ secrets.maths_TOKEN }} # 从secrets中获取PyPI令牌
        run: |
          twine upload --repository-url https://upload.pypi.org/legacy/ dist/*
